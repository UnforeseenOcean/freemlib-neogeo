freemlib for Neo-Geo - Animation functionality
==============================================
"Animations" are the quick term for foreground sprite animations (aka character
animations). All background-related stuff is found in background.txt.

The animation functionality depends on the basic sprite functionality.
================================================================================
(sketchpad)
* current animation state
* animation timers

After taking a closer look at DATLib, my animation structure needs some work.

DATLib has:
* aSprite (animated sprite class, the big one)
 * baseSprite			base sprite number
 * basePalette			base palette number
 * posX					current x position
 * posY					current y position
 * currentStepNum		current step number
 * maxStep				maximum step number for current anim
 * frames				unused/deprecated
 * currentFrame			pointer to current frame data
 * anims				pointer to animations block
 * currentAnimation		pointer to current animation
 * steps				pointer to steps block of current anim
 * currentStep			pointer to current step
 * counter				internal frame counter
 * repeats				number of repeats completed
 * currentFlip			current flipmode squad affiliation (0=none, 1=X, 2=Y, 3=XY)
 * tileWidth			width of current frame (in tiles)
 * animID				current animation ID
 * flags				internal flags (1=moved, 2=flipped)

* animation (a single animation)
 * id					animation ID
 * steps				list of frames in animation
 * link					animation to link to
 * repeats				number of repeats

* animStep (a frame in an animation)
 * frameNum				frame number
 * frameID				frame ID
 * duration				number of frames to show step
 * offsetX				x offset (from origin; for flipping, etc.)
 * offsetY				y offset (from origin; for flipping, etc.)

================================================================================
(Animation Library)
The Animation Library is created from "proper" use of the Animation IDs. What
"proper" means is up to the project, but the general guidelines are as follows:

* Primary ID/"Category"
  Think of this as the overall container for animations of a certain type.
  For a fighting game, each character would have its own Category/Primary ID.

* Secondary ID
  The secondary ID can be seen as an action or state number. It can also be used
  as an element number if you're using the Category to store multiple types of
  animations.

* Tertiary ID
  The tertiary ID can be used to store variants of the same animation under the
  secondary ID. An example in a fighting game would be someone who has multiple
  fighting styles; their idle stance could be split into multiple tertiary IDs.

These are just example guidelines, however.
How you split up and use the IDs in your project is up to you.

================================================================================
[Animations]
The high concept of an animation is a number of frames played back at a speed.
This could also be called "Animation Script" or something like that.

* Animation Primary ID/"Category" (word)
* Animation Secondary ID (word)
* Animation Tertiary ID (byte)
* Number of Frames in Animation (byte)
* Pointer to first Animation Frame Data (long)

================================================================================
[Animation Frame Data]
* Number of frames to display this frame (60 frames = 1 second)
* Metasprite pointer for this frame
* Anchor point (pixels, relative to sprite size)
* Pointer to collision data (see collision.txt)
* Pointer to next displayed frame ($FFFFFFFF if none)
