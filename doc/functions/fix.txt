freemlib for Neo-Geo - Fix Layer functionality
==============================================
The Fix layer displays over everything else.

Most fix layer writing is done with MESS_OUT and the system buffer.
Everything in here is (or should be) handled via raw LSPC reads/writes.

When it comes to positioning items on the Fix layer, there's two formats:
1) Default raw VRAM addresses (do most games do this?) ($7000-$74FF)
2) X and Y cells (Puzzle de Pon!, Art of Fighting, other games?)
 * The fix map is 40x32 cells in total size; visible area depends on NTSC/PAL.
   Most games cut off the left and right columns for a 38 tile wide area.
   FIX_CLEAR seems to do this by default.

0, 0 = $7000
0, 1 = $7001
0, 2 = $7002
...........
0,15 = $700F
0,16 = $7010
...........
0,31 = $701F
...........
1, 0 = $7020
etc.

The functions are dual-compatible thanks to a helper macro (fixmac_CalcVRAMAddr).
If the first value is >= $7000, then it's a raw VRAM address, otherwise it's a
combined cell location.

Combined cell location format: $XXYY, where XX=$00-$27,YY=$00-$1F
No sanity checking is done in the macro, so keep the values within those ranges.

This might anger you slightly if you only want to use $7000-$74FF, as expanding
the macro each time also expands the code size. You're free to modify the macro
as you see fit for your own projects, but I'm keeping it like this for now.

Note: The fix layer can only use the first 16 palettes.
Note: None of these functions take fix bankswitching into account.

Looking for another project? You could always rewrite MESS_OUT... ;)

todo:
* Oversize Fix techniques (NEO-CMC42, NEO-CMC50)

================================================================================
[fix_UpdateTile]
Change the tile number and palette index of a fix map location.

ppppTTTT tttttttt

(Params)
d0				Combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d1				New palette index (pppp) and tile number (TTTT tttttttt)

================================================================================
[fix_ChangeTile]
Change the tile number of a fix map location.

xxxx0000 00000000

(Params)
d0				Combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d1				New tile number

================================================================================
[fix_ChangePal]
Change the palette index of a fix map location.

0000xxxx xxxxxxxx

(Params)
d0				Combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d1				New palette number

================================================================================
[fix_Draw8x16]
Draws "normal" 8x16 text to the screen.

Whereas the 8x16 functions of MESS_OUT require your characters to be on different
pages,  fix_Draw8x16 lets you stack them right on top of each other, as they're
meant to be seen in game.

Tile Layout:
A B C D
A B C D

So the assumption is if you have:
$10,$11,$12,$13
the line below it will be:
$20,$21,$22,$23

(Params)
d?				Combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d?				Palette index and tile number MSB
a?				Pointer to string to draw

================================================================================
[fix_Draw16x16]
Draws "normal" 16x16 text to the screen.

What fix_Draw8x16 does for 8x16 fonts, this does for 16x16 fonts.

Tile Layout:
AA BB CC DD
AA BB CC DD

(Params)
d0				Combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d1				Palette index and tile number MSB
a0				Pointer to string to draw

================================================================================
[fix_DrawRegion]
Draws a rectangular region of tiles using a single palette and tile number MSB.

todo: rename this to fix_DrawRegionSimple & make fix_DrawRegion operate on words?

(Params)
d0				Combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d1				Combined rows/columns size
d2				Palette index and tile number MSB
a0				Pointer to data to draw

================================================================================
[fix_CopyToRAM]
Copies Fix tilemap data from VRAM to 68K RAM.

(Params)
a?				Starting 68K RAM location
d?				Starting combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d?				Copy region size ($XXYY)

================================================================================
[fix_WriteFromRAM]
Writes Fix tilemap data from 68K RAM to VRAM.

(Params)
a?				Starting 68K RAM location
d?				Starting combined cell location (x,y) or Raw VRAM address ($7000-$74FF)
d?				Write region size ($XXYY)

================================================================================
[fix_ClearAll]
Clears all tiles on the fix layer, including the leftmost and rightmost columns.
Uses tile number $0FF, palette 0.

(Clobbers)
d7				Loop counter

================================================================================
todo: "nametable" writing

In this case, "nametable" means "mapping of tiles on the Fix layer". The data
may or may not be compressed, but there should be some sort of RLE because screw
storing a bunch of the same value in a row, even when Neo P ROMs can be so huge.

"fix_WriteNametable"
* Location of nametable data to write
* Starting VRAM location
* Something about VRAM increment

{"Nametable" Data}
Thinking about this... Do I want to leverage the 68K's ability to read longwords
at the cost of data possibly ballooning in size?

* Data Length and Config (long)
00000000 00000000 00000000 00000000
|||||||| |______| |_______________|
||||||||     |            |
||||||||     |            |__________ Data length (word)
||||||||     |_______________________ (currently unused)
||||||||_____________________________ ???
|||||||______________________________ ???
||||||_______________________________ ???
|||||________________________________ ???
||||_________________________________ ???
|||__________________________________ ???
||___________________________________ ???
|____________________________________ ???
Things to find positions for:
>> VRAM increment (0=+1, 1=+32)
>> Uses compression (0=no, 1=yes)
  > Would there be multiple compression types? Does it really matter?

* Data codes
Still trying to find the best way of storing this information, both compressed
and uncompressed. I don't want to have to use longs everywhere.

Native Fix VRAM format is
00000000 00000000
|__||___________|
  |       |
  |       |_______________ Fix tile index
  |_______________________ Fix palette


You could force processing by requiring sequences to be marked, but that has the
possibility of expanding the data as well.

00000000 00000000
|__||___________|
  |       |
  |       |_______________ Sequence length (0-4095)
  |_______________________ Command nibble

Commands
* 0000		Uncompressed data (words)
* 0001		Repeat next word (sequence length) times
* 0010		
* 0011		
* 0100		
* 0101		
* 0110		
* 0111		
* 1000		
* 1001		
* 1010		
* 1011		
* 1100		
* 1101		
* 1110		
* 1111		

================================================================================
[MESS_OUT Helpers]
Macros for more semantic use of MESS_OUT are found in src/inc/mess_macro.inc.

A reference is included here. Numbered values beginning with '\' are macro
parameters; these get passed to the macro.

Note: Currently, all these macros insert data into the ROM. Macros for use in
code are forthcoming.

In order to use the macros, you just call them and pass the parameters like you
would any other assembly command:

	messmac_Format		0,$03FF		; bytes, upper byte $03, end code $FF
	messmac_SetIncr		$20			; VRAM Auto-Increment = $20 (horizontal)

Some macros don't require any parameters; these can just be called on their own:

	messmac_OutData					; Begin output data
	dc.b	'Wow',$FF
	messmac_EndSub					; end Sub-Command list

--------------------------------------------------------------------------------
messmac_Format (Command 1: Set Data Format)
\1		flags (0=bytes+end code, 1=bytes+length, 2=word+end code, 3=word+length)
\2		data (depends on what flags you set)

--------------------------------------------------------------------------------
messmac_SetIncr (Command 2: Set VRAM Increment)
\1		New VRAM increment

--------------------------------------------------------------------------------
messmac_SetAddr (Command 3: Set VRAM Address)
\1		New VRAM address

--------------------------------------------------------------------------------
messmac_OutPtr (Command 4: Pointer to data)
\1		Pointer to Commands

--------------------------------------------------------------------------------
messmac_AddAddr (Command 5: Add to VRAM Address)
\1		Value to add to VRAM address

--------------------------------------------------------------------------------
messmac_Continue (Command 6: Continue output)
Data will continue from the last address (typically used after messmac_OutPtr).

--------------------------------------------------------------------------------
messmac_OutData (Command 7: Direct output)
Put your data to display after this.

--------------------------------------------------------------------------------
messmac_Out8x16 (Command 8: 8x16 output)
\1		VRAM output upper byte

--------------------------------------------------------------------------------
messmac_Out8x16J (Command 9: 8x16 voiced Japanese text)
\1		VRAM output upper byte

--------------------------------------------------------------------------------
messmac_CallSub (Command A: Call sub-command list)
\1		Pointer to command list (must end with command B)

--------------------------------------------------------------------------------
messmac_EndSub (Command B: Return to calling command list)
Every command list called with messmac_CallSub needs to end with this.

--------------------------------------------------------------------------------
messmac_Repeat (Command C: Repeat output)
\1		Times to repeat
\2		Value to write

--------------------------------------------------------------------------------
messmac_RepIncr (Command D: Repeat and increment output)
\1		Times to repeat and increment
\2		Value to write (lower byte gets incremented)
