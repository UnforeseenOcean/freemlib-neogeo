FM Patches exist in many different formats.

<Sources>
* "DMP_SPECS.txt" by Delek
* vgm2pre "sub.ym2612.cpp"
* MVSTracker source code
* https://github.com/sikthehedgehog/Echo/blob/master/doc/eif.txt

<Definitions>
mul			MULtiple
tl			Total Level
ar			Attack Rate
dr			Decay Rate
sr			Sustain Rate ("d2r" in DefleMask docs)
rr			Release Rate
sl			Sustain Level
am			AM enable
rs			Rate Scaling ("ksr" in older DefleMask docs)
dt			DeTune
ssg			SSG envelope generator
ams			AM Sense
pms			PM Sense
feedback	Feedback
algo		ALGOrithm/connection

================================================================================
DMP (DefleMask Preset)
----------------------
[DMP (DefleMask 11 and above)] from "DMP_SPECS.txt"
$00			DMP version >= 0x0A (deflemask 11)
$01			Instrument Type (1=FM, 0=standard)
$02			lfo (fms on genesis/megadrive. pms on ym2151)
$03			feedback
$04			algo
$05			lfo2 (AMS on YM2612 and YM2151)

per-operator:
{
$06...		mul
$07...		tl
$08...		ar
$09...		dr
$0A...		sl
$0B...		rr
$0C...		am
$0D...		rs
$0E...		dt (ym2151: DT2<<4 | DT)
$0F...		sr
$10...		ssg_enabled << 3 | ssg
}

================================================================================
EIF (Echo Instrument File)
--------------------------
Data is stored for each operator in a row, like in TYI.

$00			algo | feedback << 3
$01..$04	mul | dt << 4
$05..$09	tl
$0A..$0D	ar | rs << 6
$0E..$11	dr | am << 7
$12..$15	sr
$16..$19	rr | sl << 4
$1A..$1D	ssg

================================================================================
INS (MVSTracker Instrument)
---------------------------
from "InstrEdit.cpp" and other files in MVSTracker source

$00..$03	"MVSI"
$04			Version number
$05...		Instrument Name (null-terminated string)

"v" means "varies" (since it depends on how long the instrument name is)
$v00..$v03	(mul&15) | ((dt&7) << 4)
$v04..$v07	(tl&127)
$v08..$v0B	(rs&3)<<6 | (ar&31)
$v0C..$v0F	(dr&31)
$v10..$v13	(sr&31)
$v14..$v17	(sl&15)<<4 | (rr&15)
$v18		(feedback&7)<<3 | algo&7

================================================================================
TFI (TFM Music Maker Instrument)
--------------------------------
$00			algo
$01			feedback

per-operator:
{
$03...		mul
$04...		detune+3
$05...		tl
$06...		rs
$07...		ar
$08...		dr
$09...		sr
$0A...		rr
$0B...		sl
$0C...		ssg
}

================================================================================
TYI ("Tiido's YM2612 Instrument file")
--------------------------------------
Each file is 32 bytes long, containing data for straightforward loading
into YM2612 registers - very little code reqired to load an instrument.

Each entry except the last three (8, 9, and 10) are for all four operators.

1.  DT/MUL  - 4 - Detune(D6...D4) and multiplicator(D3...D0) value
2.  TL      - 4 - Total level (D6...D0)
3.  RS/AR   - 4 - Rate scaling(D7, D6) and Attack rate (D4...D0)
4.  AM/DR   - 4 - AM enable(D7) and Decay rate (D4...D0)
5.  SR      - 4 - Sustain rate (D4...D0)
6.  SL/RR   - 4 - Sustain level (D7...D4) and Release rate (D3...D0)
7.  SSG-EG  - 4 - SSG-EG value (D3...D0)
8.  FB/ALGO - 1 - Feedback (D5...D3) and algorithm (D2...D0)
9.  FMS/AMS - 1 - LFO AM (D5...D4) and FM (D2...D0)sensitivity
10. STRING  - 2 - "YI", ignored, for padding and optimization ;)

================================================================================
VGI (VGM Music Maker Instrument)
--------------------------------
$00			algo
$01			feedback
$02			pms | ams<<4

per-operator:
{
$03...		mul
$04...		detune+3
$05...		tl
$06...		rs
$07...		ar
$08...		dr | am<<7
$09...		sr
$0A...		rr
$0B...		sl
$0C...		ssg
}

================================================================================
Y12 (Gens KMod dump)
--------------------
per-operator:
{
$00...		mul | dt<<4
$01...		tl
$02...		ar | rs<<6
$03...		dr | am<<7 ("AM IS UNUSED")
$04...		sr
$05...		rr | sl <<4
$06...		ssg ("UNUSED")
$07...		(9 unused bytes, next entry starts on $x0)
}
$40			algo
$41			feedback
$42			(14 unused bytes)
$50			("TODO: 16 BYTES FOR NAME")
$60			"VGM2Pre" ("TODO: 16 BYTES FOR DUMPER")
$70			("TODO: 16 BYTES FOR GAME")

================================================================================
SNK format (Mr.Pac driver)
--------------------------
This format is explained in the Neo-Geo Programmer's Guide, specifically
"NEO GEO SOUND PROGRAM (SOUND2.REL) USER'S MANUAL".

$00			feedback
$01			algo
$02-$05		detune (ops 1-4)
$06-$09		mul (ops 1-4)
$0A-$0D		tl (ops 1-4)
$0E-$11		rs (ops 1-4)
$12-$15		ar (ops 1-4)
$16-$19		dr (ops 1-4)
$1A-$1D		sr (ops 1-4)
$1E-$21		sl (ops 1-4)
$22-$25		rr (ops 1-4)
$26-$29		ssg (ops 1-4)
$2A			software LFO waveform
$2B			software LFO sync delay
$2C			software LFO speed (1/2)
$2D			software LFO speed (2/2)
$2E			PMD (pulse modulation effect defined)
$2F			PMS (pulse modulation general effect defined)
$30			int count (rough software? LFO timing)
$31			unused (set to 0)
$32			hardware LFO AMS, PMS
$33			hardware LFO Channel Switch (AM On)

================================================================================
VOPM .OPM Format
----------------
The format used in the VOPM VSTi by Sam, available from:
http://www.geocities.jp/sam_kb/VOPM/

.opm files are human-readable plain text.
There is usually a comment at the top of the .opm file explaining what each
parameter represents; It is reproduced here:

//MiOPMdrv sound bank Paramer Ver2002.04.22 
//LFO: LFRQ AMD PMD WF NFRQ
//@:[Num] [Name]
//CH: PAN  FL CON AMS PMS SLOT NE
//[OPname]: AR D1R D2R  RR D1L  TL  KS MUL DT1 DT2 AMS-EN

[LFO]
LFRQ		LFO Frequency
AMD			(Amplitude Modulation?)
PMD			(Pulse Modulation?)
WF			Waveform
NFRQ		(? Frequency?)

[@]
This section names the instrument and gives it a number in the bank.
Numbers start from 0 and end at 127. Names seem to end on newlines.

[CH]
PAN			Channel Panning (Left/Right)
FL			Feedback Level
CON			Connection/Algorithm
AMS			AM Sense
PMS			PM Sense
SLOT		slot enable?
NE			Noise Enable

[per-op]
AR			Attack Rate
D1R			"Decay 1 Rate"/Decay Rate
D2R			"Decay 2 Rate"/Sustain Rate
RR			Release Rate
D1L			"Decay 1 Level"/Sustain Level
TL			Total Level
KS			Key Scale
MUL			Multiple
DT1			Detune 1
DT2			Detune 2
AMS-EN		AM Sense Enable (AM On)

================================================================================
<todo>
Though these aren't for the OPN series...

* Adlib Tracker II (A2I, A2F)
* FM-Kingtracker (FIN)
* HSC-Tracker/RAD-Tracker, SAdT, Amusic/AdLib instrument (INS)
* Sound Generator 3.0 (SGI)

Instrument Banks?
* Adlib Tracker II (A2B, A2W)
* AdLib instrument bank v1.0 (BNK)
* FM-Kingtracker (FIB)
* Creative Labs FM instrument bank (IBK)

todo: decode this stuff from Adlib Tracker II
================================================================================
* BoomTracker 4.0 (CIF)

procedure import_hsc_instrument_alt(var data);
begin
	With temp_instrument do
		begin
			fm_data.AM_VIB_EG_carrier   := tDUMMY_BUFF(data)[0];
			fm_data.AM_VIB_EG_modulator := tDUMMY_BUFF(data)[1];
			fm_data.KSL_VOLUM_carrier   := tDUMMY_BUFF(data)[2];
			fm_data.KSL_VOLUM_modulator := tDUMMY_BUFF(data)[3];
			fm_data.ATTCK_DEC_carrier   := tDUMMY_BUFF(data)[4];
			fm_data.ATTCK_DEC_modulator := tDUMMY_BUFF(data)[5];
			fm_data.SUSTN_REL_carrier   := tDUMMY_BUFF(data)[6];
			fm_data.SUSTN_REL_modulator := tDUMMY_BUFF(data)[7];
			fm_data.FEEDBACK_FM         := tDUMMY_BUFF(data)[8]  AND $0f;
			fm_data.WAVEFORM_carrier    := tDUMMY_BUFF(data)[9]  AND 3;
			fm_data.WAVEFORM_modulator  := tDUMMY_BUFF(data)[10] AND 3;
		end;

	temp_instrument.panning := 0;
	temp_instrument.fine_tune := tDUMMY_BUFF(data)[11] SHR 4;
end;

procedure cif_file_loader_alt(fname: String);

const id = '<CUD-FM-Instrument>'+#26;

type
	tCIF_DATA = Record
					ident: array[1..20] of Char;
					idata: tFM_INST_DATA;
					resrv: Byte;
					iname: array[1..20] of Char;
				end;

var
	f: File;
	buffer: tCIF_DATA;
	temp: Longint;

const MIN_CIF_SIZE = SizeOf(buffer.ident)+SizeOf(buffer.idata)+SizeOf(buffer.resrv);

begin
	FillChar(temp_instrument,SizeOf(temp_instrument),0);
	{$i-}
	Assign(f,fname);
	ResetF(f);
	{$i+}
	If (IOresult <> 0) then
		begin
			CloseF(f);
			EXIT;
		end;

	BlockReadF(f,buffer,SizeOf(buffer),temp);
	If NOT ((temp >= MIN_CIF_SIZE) and (buffer.ident = id)) then
		begin
			CloseF(f);
			EXIT;
		end;

	import_hsc_instrument_alt(buffer.idata);
	temp_instrument.fine_tune := 0;
	CloseF(f);
	load_flag_alt := 1;
end;

================================================================================
* Creative Labs FM instrument (SBI)
procedure import_sbi_instrument_alt(var data);
begin
	FillChar(temp_instrument,SizeOf(temp_instrument),0);
	With temp_instrument do
		begin
			fm_data.AM_VIB_EG_modulator := tDUMMY_BUFF(data)[0];
			fm_data.AM_VIB_EG_carrier := tDUMMY_BUFF(data)[1];
			fm_data.KSL_VOLUM_modulator := tDUMMY_BUFF(data)[2];
			fm_data.KSL_VOLUM_carrier := tDUMMY_BUFF(data)[3];
			fm_data.ATTCK_DEC_modulator := tDUMMY_BUFF(data)[4];
			fm_data.ATTCK_DEC_carrier := tDUMMY_BUFF(data)[5];
			fm_data.SUSTN_REL_modulator := tDUMMY_BUFF(data)[6];
			fm_data.SUSTN_REL_carrier := tDUMMY_BUFF(data)[7];
			fm_data.WAVEFORM_modulator := tDUMMY_BUFF(data)[8] AND 3;
			fm_data.WAVEFORM_carrier := tDUMMY_BUFF(data)[9] AND 3;
			fm_data.FEEDBACK_FM := tDUMMY_BUFF(data)[10] AND $0f;
		end;

	temp_instrument.panning := 0;
	temp_instrument.fine_tune := 0;
end;

procedure sbi_file_loader_alt(fname: String);

const id = 'SBI'+#26;

type
	tSBI_DATA = Record
					ident: array[1..4]  of Char;
					iname: array[1..32] of Char;
					idata: tFM_INST_DATA;
					dummy: array[1..5]  of Byte;
				end;
var
	f: File;
	buffer: tSBI_DATA;
	temp: Longint;

begin
	FillChar(temp_instrument,SizeOf(temp_instrument),0);
	{$i-}
	Assign(f,fname);
	ResetF(f);
	{$i+}
	If (IOresult <> 0) then
		begin
			CloseF(f);
			EXIT;
		end;

	BlockReadF(f,buffer,SizeOf(buffer),temp);
	If NOT ((temp = SizeOf(buffer)) and (buffer.ident = id)) then
		begin
			CloseF(f);
			EXIT;
		end;

	import_standard_instrument_alt(buffer.idata);
	CloseF(f);
	load_flag_alt := 1;
end;
================================================================================
