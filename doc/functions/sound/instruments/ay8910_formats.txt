AY-3-8910 (and Compatible) Instrument Formats
=============================================
(major todo)

Variants:
* General Instrument AY-3-8910
* Yamaha YM2149F ("SSG")

Similar to Texas Instruments SN76489

================================================================================
[AY FX Editor (.afx)]
from "readme_eng.htm" by Shiru, slightly reformatted and edited.

(16-bit numbers are storted in LSB, MSB format.)

Every frame is encoded with the flag byte and a number of bytes that vary
depending from value changes.

 0000 0000
 |||| |__|
 ||||  |
 ||||  |__ Volume (bit0..3)
 ||||_____ Disable T (bit4)
 |||______ Change Tone (bit5)
 ||_______ Change Noise (bit6)
 |________ Disable N (bit7)

When bit5 is set, two bytes with tone period follow.
when bit6 is set, a single byte with noise period follows.
When both bits are set, first two bytes that follow are the tone period, then
a single byte with noise period follows that.

When none of the bits are set, the next flags byte follows.

End of effect is marked with byte sequence $D0, $20. Player should detect it before
outputting it to the AY registers, by checking noise period value to be equal $20.
The editor considers last non-zero volume value as last frame of an effect, other
parameters don't matter.

$D0 = Disable N (b7), Change Noise (b6), Disable T (b4)
$20 = Noise period

Note: The AY Sound FX Editor has a maximum of 0xFFF (4095) positions in a sound.

================================================================================
[Echo Envelope Format (.eef)]
The Echo engine's format for PSG instruments.

Information blatantly ripped from:
https://github.com/sikthehedgehog/Echo/blob/master/doc/eef.txt

"EEF instruments consist of a list of volume levels. Each byte represents
a different volume level, and the value ranges from $00 (loudest) to $0F
(quietest). Each byte represents one tick (i.e. 1/60th of a second).

Looping is possible. The start of the loop is marked by a byte with value
$FE, while the end of the loop is marked by a byte with value $FF. There
must be at least one volume byte between them or Echo will hang.

To make a non-looping PSG instrument, just put the last volume value
inside the loop."

"Yes, this format was kind of an afterthought. Later I may improve it to
provide at least some kind of RLE-like compression, but for now you'll
have to stick with this :P

Also, since PSG instruments are required to use PSG channels and I know
many of you don't want to mess with them at all, here's a flat PSG
instrument (i.e. no envelope):

$FE,$00,$FF"
