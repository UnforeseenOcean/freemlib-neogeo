Sound Data Documentation
================================================================================
Reference Notes

NoiseTracker/Soundtracker/Protracker formats
	http://www.aes.id.au/modformat.html
	http://battleofthebits.org/lyceum/View/amigamod%20%28format%29

For others, see doc/functions/sound/

================================================================================
[Instruments]
In-depth (and proper) info can be found in instruments.txt.

SSG instruments are a small collection of variables.
ADPCM samples are a medium amount of variables.
FM instruments are a large collection of variables.

* Instrument Type (0=FM, 1=SSG, 2=ADPCM-A, 3=ADPCM-B)

<SSG Instrument (Type 1)>
SSG Frequency = Master Clock / (64*fv)

* Volume and Mode
* Noise Period Control ($06; 1 byte)

<ADPCM-A Instrument (Type 2)>
* Volume and Left/Right Output
* Sample Start Address/256 (2 bytes)
* Sample End Address/256 (2 bytes)

<ADPCM-B Instrument (Type 3)>
* Initial Left/Right Output (1 byte)
* Sample Start Address/256 (2 bytes)
* Sample End Address/256 (2 bytes)
* Delta-N Sampling Rate (2 bytes)
* Initial Volume (1 byte)

<FM Instrument (Type 0)>
FM Instruments are of variable size due to the number of things that can be changed.

* Algorithm (0-7)
* Feedback
* Left/Right output
* AM change
* PM change
* Number of Operators (1-4)

Operator Data
* Detune
* Multiple
* Total Level
* Key Scale
* Attack
* Decay
* AM ON
* Sustain
* Sustain Level
* Release

================================================================================
[Song Data]
* Channel Use flags (2 bytes: FM1-4 & PCMA1-4; PCMA5,6 & PCMB & SSGA-C)
* Initial Song Tempo (0-511)
* Instrument Collection (Number of Instruments and pointers to instruments)
* Number of Patterns in Song
* Song Pattern Data

================================================================================
[Patterns]
* Data for each channel (15 channels max)

CTRL | FM1 | FM2 | FM3 | FM4 | PCMA1 | PCMA2 | PCMA3 | PCMA4 | PCMA5 | PCMA6 | PCMB | SSGA | SSGB | SSGC |
-----+-----+-----+-----+-----+-------+-------+-------+-------+-------+-------+------+------+------+------+

CTRL			Control Channel
FM1-FM4			FM Channels
PCMA1-PCMA6		ADPCM-A Channels
PCMB			ADPCM-B Channel
SSGA-SSGC		SSG Channels

================================================================================
[Pattern Data]
Currently trying to think of a way to deal with this, as different channels need
different lengths of data.

General breakdown>
* Note Value
* Instrument
* Volume
* (Channel-Specific Data; optional)
* Number of Effects (0-3)
* Effects Data

Note Inst. Vol.  CSD   FX1 >
-----------------------------
C-4   1     FF   ...   ...

---------------------------------------------
SSG>

The problem with SSG is that I was thinking about it all wrong.
This extends to instruments, RAM, everywhere.

SSG A-C channels>
* Note Value (Note+Octave) -> Tone Period (0-4095)
* Volume
* Noise/Tone value
* Noise Period Control
* Mode (Normal Volume or Envelope Generator) <- instrument and/or effect

---------------------------------------------
FM channels>

per-Channel>
* Note Value (Note+Octave) -> F-Numbers and Block (11 bits and 3 bits; F-Nums 0-2047; Full Range 0-16383?)
* Volume

---------------------------------------------
ADPCM-A channels>

per-Channel>
* ADPCM-A Sample Number
* Volume
--------------------
* Left/Right output
--------------------
* Effects?

---------------------------------------------
ADPCM-B channel>
* ADPCM-B Sample Number
* Volume
--------------------
* Sampling Rate
* Start/Repeat/Reset
* Left/Right output
--------------------
* Effects?

---------------------------------------------
Control Channel>
This one operates a bit differently from the other channels.
See soundControl.txt for more information.

* Number of Commands in this row (0-4 = 1-5)
--------------------
* Command Number
* Command Input
--------------------

================================================================================
[Effects]
Content moved to soundEffects.txt.

================================================================================
[SSG Channel Frequency]
12 bits

Algorithm from http://hardchord.org/yamaha_ym2608

Hz = (M/64TP)
 M: YM2610 Master Clock (8000000)
 TP: Register TP (tone period)

Calculating TP from Hertz:
TP = (M/64)/Hz

Example: A 440Hz

Hz = (8000000/64)/440
Hz = 125000/440
Hz = 284.090909

--------------------------------------------------------------------------------
[SSG Noise Frequency]
5 bits

Algorithm from http://hardchord.org/yamaha_ym2608

Hz = (M/64NP)
 M: YM2610 Master Clock (8000000)
 NP: Register NP (noise period)

Calculating NP from Hertz:
NP = (M/64)/Hz

--------------------------------------------------------------------------------
[SSG Envelope Frequency]
16 bits

Algorithm from http://hardchord.org/yamaha_ym2608

Hz = (M/1024EP)
 M: YM2610 Master Clock (8000000)
 EP: Register EP (envelope period)

"The actual frequency of the generated envelope will be 1/32 of the envelope
repetition period, meaning the Hz above represents 32 repetitions of the
envelope shape."

================================================================================
[F-Numbers]
http://www.phy.mtu.edu/~suits/notefreqs.html
https://en.wikipedia.org/wiki/Piano_key_frequencies

The algorithm for deriving a F-Number is as follows:

F-Number = (144 * fnote * 2^20 / M) / 2^B-1

 fnote: pronounciation frequency (in Hertz)
 M: master clock (8MHz = 8*10^6 = 8000000)
 B: block data

Example: 440Hz (A4)
F-Number(A4) = (144 * 440 * 2^20 / 8*10^6) / 2^4-1
F-Number(A4) = (144 * 440 * 1048576 / 8000000) / 2^3
F-Number(A4) = (8304.72192) / 8
F-Number(A4) = 1038.09024 (rounded up to 1038.1)

Example: 261.63Hz (C4, "Middle C")
F-Number(C4) = (144 * 261.63 * 2^20 / 8*10^6) / 2^4-1
F-Number(C4) = (144 * 261.63 * 1048576 / 8000000) / 2^3
F-Number(C4) = (4938.1) / 8
F-Number(C4) = 617.26261248

so octave 4 may be (fnote * 2.359296)??

Note       | Hertz   -> F-Number           | Dec.    Hex
-----------+-------------------------------+---------------
C4		   | 261.63Hz -> 617.26261248 f    | 617	0x269
C#4/Db4	   | 277.18Hz -> 653.94966528 f    | 654	0x28E
D4		   | 293.66Hz -> 692.83086336 f    | 693	0x2B5
D#4/Eb4	   | 311.13Hz -> 734.04776448 f    | 734	0x2DE
E4		   | 329.63Hz -> 777.69474048 f    | 777	0x309
F4		   | 349.23Hz -> 823.93694208 f    | 824	0x338
F#4/Gb4	   | 369.99Hz -> 872.91592704 f    | 873	0x369
G4		   | 392.00Hz -> 924.844032 f      | 925	0x39D
G#4/Ab4	   | 415.30Hz -> 979.8156288 f     | 980	0x3D3
A4		   | 440.00Hz -> 1038.09024 f      | 1038	0x40E
A#4/Bb4	   | 466.16Hz -> 1099.80942336 f   | 1100	0x44B
B4		   | 493.88Hz -> 1165.20910848 f   | 1165	0x48D

================================================================================
[Note Data]
By default, there are 12 values in the note chart per octave.
Values for non-existent D#/Eb and B#/Cb are commented out.

(Reserved Values)
$00 - nop/"Do Nothing"
$FF - Cut Note/Rest

(Example Notes)
$01		A-0
$02		Bb0
$03		B-0
-----------		Octave Switch
$04		C-1
$05		C#1
$06		D-1
$07		Eb1
$08		E-1
$09		F-1
$0A		F#1
$0B		G-1
$0C		G#1
$0D		A-1
$0E		Bb1
$0F		B-1
-----------		Octave Switch
$10		C-2
etc...

(FM Values)
* Block ranges from 0-7, giving us 8 total octaves.
* The frequency number is 11 bits, giving us values of 0-2047.
 * It seemingly works best with a set of pre-calculated values that shouldn't
   change between octaves, if you want to believe ...SEGA? Look into this.

(SSG Square Values)
The frequency number is 12 bits in total, giving us values of 0-4095.

Hertz Range:	30.525030Hz (4095) - 125000Hz (1)

$03/B-0 is the lowest valid note that can be used.

(SSG Noise Values)
The frequency number is 5 bits in total, giving us values of 0-31.

Hertz Range:	4032.258064516129032Hz (31) - 125000Hz (1)

Note values will wrap around every 32 notes.
