freemlib for Neo-Geo - Sprite functionality
===========================================
In order to use Sprites, you need to know how the data is laid out.
In the VRAM, there are four sections called SCB (Sprite Control Blocks).
Each SCB section controls a different part of the sprite.

{SCB1}
SCB1 holds the tilemaps, palette, auto-animation, and flip bits.

Tile number				0000|00000000
Palette					00000000
Auto-anim modes			2-bit/3-bit, one bit for each
HFlip, VFlip			one bit each

{SCB2}
SCB2 holds the shrinking coefficients.
Horiz. Size				0000
Vert.  Size				00000000

{SCB3}
SCB3 holds the vertical positions, sticky bit, and sprite tile size.
Y Position				000000000
Sticky Bit				one bit
Sprite Size				000000

{SCB4}
SCB4 has the horizontal position only.
X position				000000000

After the SCB sections is the Sprite List. I'm not 100% sure how it operates.

{Sprite List (Even Scanlines)}	$8600-$867F
{Sprite List (Odd Scanlines)}	$8680-$86FF
I think the system throws the sprite numbers into here, but I'm not sure how
they map to the scanlines or whatever.

================================================================================
<Function Sketchpad>

(Overall)
Active Sprites (for keeping track)
VRAM Buffers
 * background layers
 * etc.

(Metasprite)
Functions for dealing with a metasprite
* Add metasprite to active pool
* Remove metasprite from active pool
* Change metasprite X position
* Change metasprite Y position
* Change metasprite Horiz flip
* Change metasprite Vert flip
* Change metasprite Animation

(Sprite)
Functions for dealing with a single sprite
* Change sprite X position
* Change sprite Y position
* Change sprite palette
* Change sprite Horiz. flip
* Change sprite Vert. flip
* Change sprite tilemap

================================================================================
[Metasprite Data]
Metasprites are a collection of Sprites. On the Neo-Geo, it's a bit easier to
make metasprites, compared to other consoles. SCB3's Sprite height and Sticky
bit go a long way in making metasprites easier to deal with.

Commands have "mspr" prefix.

<Metasprite Data Block>
$00			Number of Sprites in Metasprite		(word)
$02...end	Pointers to Sprite data				(long)

================================================================================
[Sprite Data]
Overall, Sprites are a combination of the values in SCB1, SCB2, SCB3, and SCB4.

Commands have "spr" prefix.

* Sprite Height (Tiles)
-----------------------
SCB1 (see below)
-----------------------
SCB2{
* Horizontal Shrink (0-F)
* Vertical Shrink (00-FF)
}

SCB3{
* Y position
* Sticky bit
* Sprite size (0-33)
}

SCB4{
* X position
}

<Sprite Data Block>
$00			Sprite Height (tiles)				(word)
$02-$05		Pointer to SCB1 tilemap data		(long)
$06			SCB2 data, native format			(word)
$08			SCB3 data, native format			(word)
$0A			SCB4 data, native format			(word)

SCB1 data is stored in native format and is limited based on the value of
Sprite Height. Real length of SCB1 data is 2x Sprite Height.

================================================================================
[Tilemap Data for SCB1]
Each sprite in SCB1 has 64 values (32 possible "sub-sprites").
Each spot in a sprite's SCB1 block is two values.

* Tile Number LSB		16 bits > byte 1
-------------------------------
* Palette				8 bits \
* Tile Number MSB		4 bits | byte 2
* Auto-Anim Flags		2 bits |
* V/H Flip Flags		2 bits /

Tile index is 20 bits (values 0-1048575/$00000-$FFFFF).

Converting a tile index value of $12345 to SCB1:

LSB = ($12345 & $0FFFF) -> SCB1a
MSB = (($12345 & $F0000)>>12) | SCB1b

SCB1 Macro would take the following values:
* Tile Number ($00000-$FFFFF)
--------------------------------
* Palette Index ($00-$FF)
* Auto-Anim (4/2-bit or 8/3-bit)
* Vertical Flip
* Horizontal Flip

================================================================================
todo: actual documentation of existing code
* spr_Load
* sprmac_SCB1Data
* sprmac_SpriteData
* mspr_Load
