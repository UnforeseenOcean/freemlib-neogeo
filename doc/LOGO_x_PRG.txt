LOGO_*.PRG Files
================
These types of files represent data for the Neo-Geo CD loading screen. Simple
loading screens don't require much in the way of code, while custom loading
screens (e.g. Samurai Shodown IV) do.

Since this is a PRG file, and the format depends on various 68K data widths,
it's typically best/easiest to use an assembler to generate the LOGO_*.PRG file.

[Basic Layout]
+--------+------+------+-------------+
| Offset | Type | Size | Description |
+--------+------+------+-------------+
| $0000  | Word |    1 | Header Data |
|$0002...| Long |(var.)| Entry Index |
|(later) |(var.)|(var.)| Entry Data  |
+--------+------+------+-------------+

[Header Data]
The default header data only has three bits worth of control.
Custom loaders may be able to interpret this word differently.

FEDCBA98 76543210
xxxxxxxx xxxxx|||
              ||+-- Disable "Now Loading" graphic
              |+--- Disable progress indicator
              +---- Disable animation

<Disable "Now Loading" graphic>
When set to 1, this will disable the built-in blue/green "Now Loading" graphic.

<Disable progress indicator>
When set to 1, this will disable the built-in progress indicator.

<Disable animation>
When set to 1, this will disable all animation commands.

[Entry Index]
Each entry is two longword values: the data type, and the start address. It
appears that you should structure the file list in the order of the data types,
so the fix tiles should come first, then palettes, etc. However, this has not
been confirmed to be true. (Just some anecdotal stuff from when I made my first
LOGO_x.PRG file... :p)

<Data Type>
$00000000: ?????????
$00000001: Fix tiles
$00000002: Palette data
$00000003: Fix map
$00000004: Animation map
(Custom loaders might be able to handle different types?)

<Start Address>
These values are meant to be absolute addresses, starting at $120000. What's at
$120000, you might ask? The file you're creating! This is why I told you to use
an assembler for this, since making labels for the data and adding $120000 to
them works just fine.

[Entry Data]
This is the fun part, since each data type has different.

<Fix Tiles>
+--------+------+------+-------------+
| Offset | Type | Size | Description |
+--------+------+------+-------------+
| $0000  | Word |    1 | Load Offset |
| $0002  | Word |    1 | Fix Size    |
|$0004...| Fix  |(var.)| Fix tiles*  |
+--------+------+------+-------------+

* Fix tile data is byteswapped from the original format.

Examples:
when the Load Offset is $4000, the first fix tile is loaded at position $100.
when the Fix Size is $4000, 512 ($200) tiles of Fix data are loaded.

<Palette Data>
+--------+------+------+-------------+
| Offset | Type | Size | Description |
+--------+------+------+-------------+
| $0000  | Word |    1 | Palete Num. |
| $0002  | Word |   16 | Color Data  |
+--------+------+------+-------------+

The first four palette sets (indexes 0-4) are typically used by the BIOS and
aren't touched in official games. If you know you're never going to use the
default BIOS loading screen, you might be able to get away with trashing them.

The Color Data is the same format as the regular palette colors.

<Fix Map>
(todo)

<Animation Map>
(todo)

[Custom Loaders]
(super todo)
